# Challenge 9: MongoDB

Consigna: Utilizando Mongo Shell, crear una base de datos llamada ecommerce que contenga dos colecciones: mensajes y productos.

a.- Cree carpeta llamada por ejemplo "ecommerce"

	mongod --dbpath "D:\Dev\CoderHouse\012.Desafio_09\ecommerce"

b.-Inicie el cliente (otra consola y ejecutar el comando):
	mongosh
	use ecommerce

Nota:
mongo shell no longer ships with server binaries. You can download it from https://www.mongodb.com/docs/mongodb-shell/install/
un mongosh instead of mongo.

1) Agregar 10 documentos con valores distintos a las colecciones mensajes y productos. El
formato de los documentos debe estar en correspondencia con el que venimos utilizando en
el entregable con base de datos MariaDB. 

2) Definir las claves de los documentos en relación a los campos de las tablas de esa base. En
el caso de los productos, poner valores al campo precio entre los 100 y 5000 pesos(eligiendo
valores intermedios, ej: 120, 580, 900, 1280, 1700, 2300, 2860, 3350, 4320, 4990). 

	- Estructura messages	: email, date, message
	- Estructura products	: name, price, stock, url 


	db.messages.insertMany([
	  {email: "usuario1@gmail.com", date: ISODate(), message: "Hola soy el usuario1"},
	  {email: "usuarioAdmin@gmail.com", date: ISODate(), message: "Buentas tardes usuario1 en que podemos ayudarlo?"},
	  {email: "usuario2@gmail.com", date: ISODate(), message: "Hola soy el usuario2"},
	  {email: "usuarioAdmin@gmail.com", date: ISODate(), message: "Buenas tardes usuario2 en que podemos ayudarlo?"},
	  {email: "usuario1@gmail.com", date: ISODate(), message: "El precio del producto notebook?"},
	  {email: "usuario2@gmail.com", date: ISODate(), message: "Tienen en stock el producto teclado"},
	  {email: "usuarioAdmin@gmail.com", date: ISODate(), message: "El precio del notebook es 2500"},
	  {email: "usuario1@gmail.com", date: ISODate(), message: "Muchas gracias!"},
	  {email: "usuarioAdmin@gmail.com", date: ISODate(), message: "Existe stock de 5 unidades de teclado"},
	  {email: "usuario2@gmail.com", date: ISODate(), message: "gracias"}
	])

	db.products.insertMany([
	  {name: "Notebook", price: 4500, stock: 5, url: "https://cdn3.iconfinder.com/data/icons/free-multimedia-line/128/multimedia-04-256.png"},
	  {name: "Camara Video", price: 3800, stock: 3, url: "https://cdn3.iconfinder.com/data/icons/free-multimedia-line/128/multimedia-12-256.png"},
	  {name: "Camara Fotografica", price: 2700, stock: 20, url: "https://cdn3.iconfinder.com/data/icons/free-multimedia-line/128/multimedia-03-256.png"},
	  {name: "Celular", price: 1550, stock: 10, url: "https://cdn3.iconfinder.com/data/icons/free-multimedia-line/128/multimedia-09-256.png"},
	  {name: "Microfono", price: 1300, stock: 10, url: "https://cdn3.iconfinder.com/data/icons/free-multimedia-line/128/multimedia-05-256.png"},
	  {name: "Parlante", price: 1200, stock: 5, url: "https://cdn3.iconfinder.com/data/icons/free-multimedia-line/128/multimedia-02-256.png"},
	  {name: "Audifono", price: 750, stock: 40, url: "https://cdn3.iconfinder.com/data/icons/free-multimedia-line/128/multimedia-01-256.png"},
	  {name: "Mouse", price: 120, stock: 30, url: "https://cdn3.iconfinder.com/data/icons/free-multimedia-line/128/multimedia-13-256.png"},
	  {name: "Control PlayStation", price: 64, stock: 2,url: "https://cdn3.iconfinder.com/data/icons/free-multimedia-line/128/multimedia-06-256.png"},
	  {name: "Pendrive", price: 50, stock: 5, url: "https://cdn3.iconfinder.com/data/icons/free-multimedia-line/128/multimedia-07-256.png"} 
	])

3) Listar todos los documentos en cada colección.

	db.messages.find()
	db.products.find()

4) Mostrar la cantidad de documentos almacenados en cada una de ellas.

	db.messages.estimatedDocumentCount()
	db.products.estimatedDocumentCount()


5) Realizar un CRUD sobre la colección de productos:

a) Agregar un producto más en la colección de productos 

	db.products.insertOne({name: "Impresora", price: 1200, stock:1, url: "https://cdn1.iconfinder.com/data/icons/office-171/32/office-14-256.png"})

b) Realizar una consulta por nombre de producto específico:

	i) Listar los productos con precio menor a 1000 pesos.	
	ii) Listar los productos con precio entre los 1000 a 3000 pesos.
	iii) Listar los productos con precio mayor a 3000 pesos.
	iv) Realizar una consulta que traiga sólo el nombre del tercer producto más barato.

	db.products.find({price: {$lt: 1000}})
	db.products.find({price: {$in: [1000, 3000]}})
	db.products.find({price: {$gt: 3000}})
	db.products.find({}, {"name": 1}).sort({price: 1}).skip(2).limit(1)	
	

c) Hacer una actualización sobre todos los productos, agregando el campo stock a todos
ellos con un valor de 100.

	Option1: db.products.updateMany({}, {$set: {stock: 100}}, {upsert: true})
	Option2: db.products.update({}, {$set:{stock:100}}, {upsert:false, multi:true})
	
d) Cambiar el stock a cero de los productos con precios mayores a 4000 pesos. 

	Option1: db.products.updateMany({price: {$gt: 4000}}, {$set: {stock: 0}})
	Option2: db.products.update({price: {$gt: 4000}},{$set:{stock:0}},{upsert:false,multi:true})
	
e) Borrar los productos con precio menor a 1000 pesos
	
	db.products.deleteMany({price: {$lt: 1000}})


6) Crear un usuario 'pepe' clave: 'asd456' que sólo pueda leer la base de datos ecommerce.
Verificar que pepe no pueda cambiar la información.

	use admin
	db.createUser({user: "pepe", pwd: "asd456", roles: [{role: "read", db: "ecommerce"}]})
	
	terminal servidor:
		mongod --dbpath "D:\Dev\CoderHouse\012.Desafio_09\ecommerce" --auth
	
	terminal cliente:
		mongosh -u pepe -p asd456
		use ecommerce
		db.productos.find()


















